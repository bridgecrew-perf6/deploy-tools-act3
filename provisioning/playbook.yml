---
- hosts: all
  become: true
  handlers:
  - name: restart nginx
    service: name=nginx state=restarted
  tasks:
  - name: Make sure we can connect
    ping:
  
  # MySQL
  - name: Install MySQL
    apt:
      state: present
      update_cache: yes
      name:
      - mysql-server
      - python-mysqldb
  
  # - name: Generate new root password
  #   command: openssl rand -hex 7 creates=/root/.my.cnf
  #   register: mysql_new_root_pass
  
  # - name: Create my.cnf
  #   template: src=templates/mysql/my.cnf dest=/root/.my.cnf
  #   when: mysql_new_root_pass.changed
  
  - name: Remove anonymous users
    mysql_user: name="" state=absent
    # when: mysql_new_root_pass.changed
  
  - name: Remove test database
    mysql_db: name=test state=absent
    # when: mysql_new_root_pass.changed
  
  # - name: Output new root password
  #   debug: msg="New root password is {{mysql_new_root_pass.stdout}}"
  #   when:  mysql_new_root_pass.changed
  #   # If /root/.my.cnf exists and the command is not run
  
  # - name: Password not changed
  #   debug: msg="No change to root password"
  #   when: not mysql_new_root_pass.changed
  #   # If /root/.my.cnf exists and the command is not run
  
  # - name: Update root password
  #   mysql_user: name=root host={{item}} password={{mysql_new_root_pass.stdout}}
  #   loop: 
  #   - "{{ansible_hostname}}"
  #   - 127.0.0.1
  #   - ::1
  #   - localhost
  
  # - name: Output new root password
  #   debug: msg="New root password is {{mysql_new_root_pass.stdout}}"

  
  # Nginx
  - name: Install Nginx
    apt: name=nginx state=present
  
  - name: Starg Nginx
    service: name=nginx state=started
  
  - name: Remove apache2
    apt: name=apache2 state=absent

    # PHP
  - name: Install PHP
    apt: 
      name:
      - php
      - php-fpm
      - php-mysql
      - php-xml
      state: present
      update_cache: yes

  # - name: Get WordPress checksum
  #   url: url-https://wordpress.org/latest.zip.sha1 return_content=true
  #   register: wp_checksum

  - name: Download WordPress
    get_url:
      url: https://wordpress.org/latest.zip
      dest: /tmp/wordpress.zip

  # - name: Download WordPress
  #   get_url:
  #     url: https://wordpress.org/latest.zip
  #     dest: /tmp/wordpress.zip
      # mode: '0440'

  - name: Install unzip
    apt: name={{item}} state=present
    loop: 
    - unzip

  - name: Create project folder
    file: dest=/var/www/book.example.com state=directory

  - name: Unzip WordPress
    unarchive: src=/tmp/wordpress.zip dest=/tmp copy=no creates=/tmp/wordpress/wp-settings.php

  # - name: Remover apache2
  #   command: apt remove apache2
  
  # - name: Remover /var/www/html
  #   command: rm -r /var/www/html

  - name: Copy WordPress
    command: cp -r /tmp/wordpress/. /var/www/html/

  - name: Create backup
    template: src=templates/mysql/backup.sql dest=/tmp/backup.sql



  - name: Create WordPress MySQL database
    mysql_db: name=wpbd state=present

  - name: Does the database exist?
    command: mysql -u root wpbd -e "SELECT ID FROM wpbd.wp_users LIMIT 1;"
    register: db_exist
    ignore_errors: true

  - name: Create WordPress MySQL database
    mysql_db: name=wpbd state=import target=/tmp/backup.sql
    when: db_exist.rc > 0

  - name: Create Wordpress MySQL users
    mysql_user: name=wp host=localhost password=00wp123456 priv=wpbd.*:ALL

  - name: Create wp-config
    template: src=templates/wordpress/wp-config.php dest=/var/www/book.example.com/wp-config.php

  - name: Create nginx config
    template: src=templates/nginx/book.example.com dest=/etc/nginx/sites-available/book.example.com

  - name: Create link /etc/nginx/sites-available/book.example.com APUNTADO POR /etc/nginx/sites-enabled/book.example.com
    file: src=/etc/nginx/sites-available/book.example.com dest=/etc/nginx/sites-enabled/default state=link
    notify: restart nginx
  




